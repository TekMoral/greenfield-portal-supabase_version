[33mcommit 12fabc07b8fb0233974e91d905928a360bc2b4ea[m
Author: piNfinity <tekmoral24@gmail.com>
Date:   Thu Sep 25 11:06:27 2025 +0100

    production testing deployment

[1mdiff --git a/deploy-email-function.bat b/deploy-email-function.bat[m
[1mnew file mode 100644[m
[1mindex 0000000..eef17aa[m
[1m--- /dev/null[m
[1m+++ b/deploy-email-function.bat[m
[36m@@ -0,0 +1,23 @@[m
[32m+[m[32m@echo off[m
[32m+[m[32mecho Deploying Email Edge Functions...[m
[32m+[m[32mecho.[m
[32m+[m
[32m+[m[32mREM Deploy the send-email function[m
[32m+[m[32mecho Deploying send-email function...[m
[32m+[m[32msupabase functions deploy send-email[m
[32m+[m
[32m+[m[32mecho.[m
[32m+[m[32mecho Deploying reset-password function...[m
[32m+[m[32msupabase functions deploy reset-password[m
[32m+[m
[32m+[m[32mecho.[m
[32m+[m[32mecho Deployment complete![m
[32m+[m[32mecho.[m
[32m+[m[32mecho Don't forget to:[m
[32m+[m[32mecho 1. Add BREVO_API_KEY to your Supabase project secrets[m
[32m+[m[32mecho 2. Ensure SUPABASE_SERVICE_ROLE_KEY is available in Edge Functions[m
[32m+[m[32mecho 3. Test the email functionality using the EmailTestComponent[m
[32m+[m[32mecho 4. Test password reset from the login page[m
[32m+[m[32mecho 5. Update your .env file with VITE_BREVO_API_KEY for development[m
[32m+[m[32mecho.[m
[32m+[m[32mpause[m
\ No newline at end of file[m
[1mdiff --git a/supabase/functions/auth-logout/index.ts b/supabase/functions/auth-logout/index.ts[m
[1mnew file mode 100644[m
[1mindex 0000000..53f4a23[m
[1m--- /dev/null[m
[1m+++ b/supabase/functions/auth-logout/index.ts[m
[36m@@ -0,0 +1,65 @@[m
[32m+[m[32m// supabase/functions/auth-logout/index.ts[m
[32m+[m[32m// Clears the Secure, HttpOnly refresh cookie and attempts to revoke the refresh token.[m
[32m+[m
[32m+[m[32mimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2'[m
[32m+[m[32mimport { getResponseCorsHeaders, handleCors } from '../_shared/cors-hardened.ts'[m
[32m+[m
[32m+[m[32mconst REFRESH_COOKIE_NAME = 'sp_rt'[m
[32m+[m
[32m+[m[32mfunction parseCookies(req: Request): Record<string, string> {[m
[32m+[m[32m  const header = req.headers.get('cookie') || ''[m
[32m+[m[32m  const pairs = header.split(';').map(p => p.trim()).filter(Boolean)[m
[32m+[m[32m  const out: Record<string, string> = {}[m
[32m+[m[32m  for (const p of pairs) {[m
[32m+[m[32m    const idx = p.indexOf('=')[m
[32m+[m[32m    if (idx > -1) {[m
[32m+[m[32m      const k = p.substring(0, idx)[m
[32m+[m[32m      const v = decodeURIComponent(p.substring(idx + 1))[m
[32m+[m[32m      out[k] = v[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m[32m  return out[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunction deleteCookie(name: string) {[m
[32m+[m[32m  return `${name}=; Max-Age=0; Path=/; HttpOnly; Secure; SameSite=None; Partitioned`;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mDeno.serve(async (req: Request) => {[m
[32m+[m[32m  const pre = handleCors(req)[m
[32m+[m[32m  if (pre) return pre[m
[32m+[m[32m  const corsHeaders = getResponseCorsHeaders(req)[m
[32m+[m
[32m+[m[32m  if (req.method !== 'POST') {[m
[32m+[m[32m    return new Response(JSON.stringify({ success: false, error: 'Method not allowed' }), {[m
[32m+[m[32m      status: 405,[m
[32m+[m[32m      headers: { ...corsHeaders, 'Content-Type': 'application/json' }[m
[32m+[m[32m    })[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  try {[m
[32m+[m[32m    const cookies = parseCookies(req)[m
[32m+[m[32m    const refreshToken = cookies[REFRESH_COOKIE_NAME][m
[32m+[m
[32m+[m[32m    // Attempt to revoke refresh token using service role if available[m
[32m+[m[32m    const serviceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')[m
[32m+[m[32m    // Note: supabase-js does not expose a public API to revoke a specific refresh token.[m
[32m+[m[32m    // We simply clear the cookie; server-side revocation (global sign-out) can be implemented separately if needed.[m
[32m+[m
[32m+[m[32m    return new Response(JSON.stringify({ success: true }), {[m
[32m+[m[32m      status: 200,[m
[32m+[m[32m      headers: {[m
[32m+[m[32m        ...corsHeaders,[m
[32m+[m[32m        'Content-Type': 'application/json',[m
[32m+[m[32m        'Set-Cookie': deleteCookie(REFRESH_COOKIE_NAME),[m
[32m+[m[32m        'Cache-Control': 'no-store',[m
[32m+[m[32m      }[m
[32m+[m[32m    })[m
[32m+[m[32m  } catch (e) {[m
[32m+[m[32m    console.error('auth-logout error', e)[m
[32m+[m[32m    return new Response(JSON.stringify({ success: false, error: 'Internal server error' }), {[m
[32m+[m[32m      status: 500,[m
[32m+[m[32m      headers: { ...corsHeaders, 'Content-Type': 'application/json' }[m
[32m+[m[32m    })[m
[32m+[m[32m  }[m
[32m+[m[32m})[m
[1mdiff --git a/supabase/functions/reset-password/index.ts b/supabase/functions/reset-password/index.ts[m
[1mnew file mode 100644[m
[1mindex 0000000..8b40e67[m
[1m--- /dev/null[m
[1m+++ b/supabase/functions/reset-password/index.ts[m
[36m@@ -0,0 +1,254 @@[m
[32m+[m[32m// supabase/functions/reset-password/index.ts[m
[32m+[m[32mimport { serve } from "https://deno.land/std@0.168.0/http/server.ts"[m
[32m+[m[32mimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2'[m
[32m+[m
[32m+[m[32mconst corsHeaders = {[m
[32m+[m[32m  'Access-Control-Allow-Origin': '*',[m
[32m+[m[32m  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',[m
[32m+[m[32m  'Access-Control-Allow-Methods': 'POST, OPTIONS',[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32minterface ResetPasswordRequest {[m
[32m+[m[32m  email: string[m
[32m+[m[32m  redirectTo?: string[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mserve(async (req) => {[m
[32m+[m[32m  // Handle CORS preflight requests[m
[32m+[m[32m  if (req.method === 'OPTIONS') {[m
[32m+[m[32m    return new Response('ok', { headers: corsHeaders })[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  try {[m
[32m+[m[32m    // Create Supabase client with service role key for admin operations[m
[32m+[m[32m    const supabaseAdmin = createClient([m
[32m+[m[32m      Deno.env.get('SUPABASE_URL') ?? '',[m
[32m+[m[32m      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',[m
[32m+[m[32m    )[m
[32m+[m
[32m+[m[41m    [m
[32m+[m[32m    // Parse request body[m
[32m+[m[32m    const body: ResetPasswordRequest = await req.json()[m
[32m+[m[32m    const { email, redirectTo } = body[m
[32m+[m
[32m+[m[32m    if (!email) {[m
[32m+[m[32m      throw new Error('Email is required')[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Check if user exists in our system using service role[m
[32m+[m[32m    const { data: userProfile, error: profileError } = await supabaseAdmin[m
[32m+[m[32m      .from('user_profiles')[m
[32m+[m[32m      .select('id, email, full_name, role')[m
[32m+[m[32m      .eq('email', email.trim())[m
[32m+[m[32m      .single()[m
[32m+[m
[32m+[m[32m    if (profileError || !userProfile) {[m
[32m+[m[32m      return new Response([m
[32m+[m[32m        JSON.stringify({[m[41m [m
[32m+[m[32m          success: false,[m[41m [m
[32m+[m[32m          error: 'No account found with this email address',[m
[32m+[m[32m          code: 'USER_NOT_FOUND'[m
[32m+[m[32m        }),[m
[32m+[m[32m        {[m
[32m+[m[32m          headers: { ...corsHeaders, 'Content-Type': 'application/json' },[m
[32m+[m[32m          status: 404,[m
[32m+[m[32m        },[m
[32m+[m[32m      )[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Generate password reset link using Admin API (custom email flow)[m
[32m+[m[32m    const redirectUrl = redirectTo || `${req.headers.get('origin') || 'http://localhost:3000'}/reset-password`[m
[32m+[m[32m    const { data: linkData, error: linkError } = await supabaseAdmin.auth.admin.generateLink({[m
[32m+[m[32m      type: 'recovery',[m
[32m+[m[32m      email: email.trim(),[m
[32m+[m[32m      options: { redirectTo: redirectUrl }[m
[32m+[m[32m    })[m
[32m+[m
[32m+[m[32m    if (linkError) {[m
[32m+[m[32m      console.error('Generate link error:', linkError)[m
[32m+[m[32m      throw new Error(linkError.message || 'Failed to generate reset link')[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Use the Supabase-generated action link which will redirect to our app with a `code`[m
[32m+[m[32m    const resetLink = (linkData?.properties as any)?.action_link || (linkData as any)?.action_link || redirectUrl[m
[32m+[m
[32m+[m[32m    // Send custom branded email via Brevo[m
[32m+[m[32m    const brevoApiKey = Deno.env.get('BREVO_API_KEY')[m
[32m+[m[32m    if (!brevoApiKey) {[m
[32m+[m[32m      throw new Error('Email service not configured: missing BREVO_API_KEY')[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    try {[m
[32m+[m[32m      const emailData = {[m
[32m+[m[32m        sender: {[m
[32m+[m[32m          name: Deno.env.get('BREVO_SENDER_NAME') || "Greenfield College Portal",[m
[32m+[m[32m          email: Deno.env.get('BREVO_SENDER_EMAIL') || "admin@greenfieldcollege.name.ng"[m
[32m+[m[32m        },[m
[32m+[m[32m        to: [[m
[32m+[m[32m          {[m
[32m+[m[32m            email: email.trim(),[m
[32m+[m[32m            name: userProfile.full_name || email.split('@')[0][m
[32m+[m[32m          }[m
[32m+[m[32m        ],[m
[32m+[m[32m        subject: "Password Reset Request - Greenfield College Portal",[m
[32m+[m[32m        htmlContent: generatePasswordResetHTML({[m
[32m+[m[32m          userName: userProfile.full_name || email.split('@')[0],[m
[32m+[m[32m          resetLink[m
[32m+[m[32m        }),[m
[32m+[m[32m        textContent: generatePasswordResetText({[m
[32m+[m[32m          userName: userProfile.full_name || email.split('@')[0],[m
[32m+[m[32m          resetLink[m
[32m+[m[32m        })[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      const brevoResponse = await fetch('https://api.brevo.com/v3/smtp/email', {[m
[32m+[m[32m        method: 'POST',[m
[32m+[m[32m        headers: {[m
[32m+[m[32m          'Accept': 'application/json',[m
[32m+[m[32m          'Content-Type': 'application/json',[m
[32m+[m[32m          'api-key': brevoApiKey[m
[32m+[m[32m        },[m
[32m+[m[32m        body: JSON.stringify(emailData)[m
[32m+[m[32m      })[m
[32m+[m
[32m+[m[32m      if (!brevoResponse.ok) {[m
[32m+[m[32m        const errorText = await brevoResponse.text()[m
[32m+[m[32m        const details = `BREVO_ERROR status=${brevoResponse.status} ${brevoResponse.statusText} body=${errorText}`[m
[32m+[m[32m        console.error('Custom email service failed:', details)[m
[32m+[m[32m        throw new Error(details)[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      console.log('Custom branded email sent successfully')[m
[32m+[m[32m    } catch (emailError) {[m
[32m+[m[32m      console.error('Custom email service failed:', emailError)[m
[32m+[m[32m      throw emailError[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Log the password reset attempt[m
[32m+[m[32m    await supabaseAdmin[m
[32m+[m[32m      .from('audit_logs')[m
[32m+[m[32m      .insert({[m
[32m+[m[32m        user_id: userProfile.id,[m
[32m+[m[32m        action: 'PASSWORD_RESET_REQUESTED',[m
[32m+[m[32m        table_name: 'auth.users',[m
[32m+[m[32m        details: {[m
[32m+[m[32m          email: email.trim(),[m
[32m+[m[32m          user_name: userProfile.full_name,[m
[32m+[m[32m          user_role: userProfile.role[m
[32m+[m[32m        },[m
[32m+[m[32m        description: `Password reset requested for ${userProfile.full_name} (${email.trim()})`,[m
[32m+[m[32m        ip_address: req.headers.get('x-forwarded-for') || 'unknown'[m
[32m+[m[32m      })[m
[32m+[m
[32m+[m[32m    return new Response([m
[32m+[m[32m      JSON.stringify({[m[41m [m
[32m+[m[32m        success: true,[m[41m [m
[32m+[m[32m        message: 'Password reset instructions have been sent to your email',[m
[32m+[m[32m        data: {[m
[32m+[m[32m          email: email.trim(),[m
[32m+[m[32m          userName: userProfile.full_name || email.split('@')[0][m
[32m+[m[32m        }[m
[32m+[m[32m      }),[m
[32m+[m[32m      {[m
[32m+[m[32m        headers: { ...corsHeaders, 'Content-Type': 'application/json' },[m
[32m+[m[32m        status: 200,[m
[32m+[m[32m      },[m
[32m+[m[32m    )[m
[32m+[m
[32m+[m[32m  } catch (error) {[m
[32m+[m[32m    console.error('Password reset error:', error)[m
[32m+[m[32m    return new Response([m
[32m+[m[32m      JSON.stringify({[m[41m [m
[32m+[m[32m        success: false,[m[41m [m
[32m+[m[32m        error: error.message || 'An error occurred while processing your request'[m
[32m+[m[32m      }),[m
[32m+[m[32m      {[m
[32m+[m[32m        headers: { ...corsHeaders, 'Content-Type': 'application/json' },[m
[32m+[m[32m        status: 400,[m
[32m+[m[32m      },[m
[32m+[m[32m    )[m
[32m+[m[32m  }[m
[32m+[m[32m})[m
[32m+[m
[32m+[m[32mfunction generatePasswordResetHTML(data: { userName: string; resetLink: string }): string {[m
[32m+[m[32m  return `[m
[32m+[m[32m    <!DOCTYPE html>[m
[32m+[m[32m    <html>[m
[32m+[m[32m    <head>[m
[32m+[m[32m      <meta charset="utf-8">[m
[32m+[m[32m      <meta name="viewport" content="width=device-width, initial-scale=1.0">[m
[32m+[m[32m      <title>Password Reset</title>[m
[32m+[m[32m      <style>[m
[32m+[m[32m        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }[m
[32m+[m[32m        .container { max-width: 600px; margin: 0 auto; padding: 20px; }[m
[32m+[m[32m        .header { background: linear-gradient(135deg, #10b981, #059669); color: white; padding: 30px; text-align: center; border-radius: 8px 8px 0 0; }[m
[32m+[m[32m        .content { background: #f9fafb; padding: 30px; border-radius: 0 0 8px 8px; }[m
[32m+[m[32m        .button { display: inline-block; background: #10b981; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: bold; margin: 20px 0; }[m
[32m+[m[32m        .footer { text-align: center; margin-top: 30px; color: #6b7280; font-size: 14px; }[m
[32m+[m[32m        .warning { background: #fef3c7; border: 1px solid #f59e0b; padding: 15px; border-radius: 6px; margin: 20px 0; }[m
[32m+[m[32m      </style>[m
[32m+[m[32m    </head>[m
[32m+[m[32m    <body>[m
[32m+[m[32m      <div class="container">[m
[32m+[m[32m        <div class="header">[m
[32m+[m[32m          <h1>🔐 Password Reset Request</h1>[m
[32m+[m[32m          <p>Greenfield College Portal</p>[m
[32m+[m[32m        </div>[m
[32m+[m[32m        <div class="content">[m
[32m+[m[32m          <h2>Hello ${data.userName},</h2>[m
[32m+[m[32m          <p>We received a request to reset your password for your Greenfield College Portal account.</p>[m
[32m+[m[41m          [m
[32m+[m[32m          <p>Click the button below to reset your password:</p>[m
[32m+[m[32m          <a href="${data.resetLink}" class="button">Reset Password</a>[m
[32m+[m[41m          [m
[32m+[m[32m          <div class="warning">[m
[32m+[m[32m            <strong>⚠️ Security Notice:</strong>[m
[32m+[m[32m            <ul>[m
[32m+[m[32m              <li>This link will expire in 1 hour for security reasons</li>[m
[32m+[m[32m              <li>If you didn't request this reset, please ignore this email</li>[m
[32m+[m[32m              <li>Never share this link with anyone</li>[m
[32m+[m[32m            </ul>[m
[32m+[m[32m          </div>[m
[32m+[m[41m          [m
[32m+[m[32m          <p>If the button doesn't work, copy and paste this link into your browser:</p>[m
[32m+[m[32m          <p style="word-break: break-all; background: #e5e7eb; padding: 10px; border-radius: 4px; font-family: monospace;">${data.resetLink}</p>[m
[32m+[m[41m          [m
[32m+[m[32m          <p>If you have any questions, please contact the school administration.</p>[m
[32m+[m[41m          [m
[32m+[m[32m          <p>Best regards,<br>[m
[32m+[m[32m          <strong>Greenfield College Portal Team</strong></p>[m
[32m+[m[32m        </div>[m
[32m+[m[32m        <div class="footer">[m
[32m+[m[32m          <p>This is an automated message. Please do not reply to this email.</p>[m
[32m+[m[32m          <p>&copy; ${new Date().getFullYear()} Greenfield College. All rights reserved.</p>[m
[32m+[m[32m        </div>[m
[32m+[m[32m      </div>[m
[32m+[m[32m    </body>[m
[32m+[m[32m    </html>[m
[32m+[m[32m  `[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunction generatePasswordResetText(data: { userName: string; resetLink: string }): string {[m
[32m+[m[32m  return `[m
[32m+[m[32m    Password Reset Request - Greenfield College Portal[m
[32m+[m[41m    [m
[32m+[m[32m    Hello ${data.userName},[m
[32m+[m[41m    [m
[32m+[m[32m    We received a request to reset your password for your Greenfield College Portal account.[m
[32m+[m[41m    [m
[32m+[m[32m    Please click the following link to reset your password:[m
[32m+[m[32m    ${data.resetLink}[m
[32m+[m[41m    [m
[32m+[m[32m    Security Notice:[m
[32m+[m[32m    - This link will expire in 1 hour for security reasons[m
[32m+[m[32m    - If you didn't request this reset, please ignore this email[m
[32m+[m[32m    - Never share this link with anyone[m
[32m+[m[41m    [m
[32m+[m[32m    If you have any questions, please contact the school administration.[m
[32m+[m[41m    [m
[32m+[m[32m    Best regards,[m
[32m+[m[32m    Greenfield College Portal Team[m
[32m+[m[41m    [m
[32m+[m[32m    This is an automated message. Please do not reply to this email.[m
[32m+[m[32m  `[m
[32m+[m[32m}[m
\ No newline at end of file[m
